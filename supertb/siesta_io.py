""" 
Python Class dedicated to parse the file generated by Siesta
"""

import os
import sys
import time
import numpy as np
import math
import warnings
import os.path

from supertb import Structure, Spinor, Eigenset
from copy import deepcopy

################################################################################  

class Siestarun(object):

    def __init__(self, fileroot="./", sys="system", name="System", pfiles=[], readbands=True, readeigen=False):

        self.fileroot = fileroot
        self.sysname = sys
        self.filename = name
        self.params = {}

        # Parse the sys.fdf file
        self.set_params()

        # Parse the name.STRUCT_OUT file
        self.set_geometry()

        # Parse the name.KP file
        if readbands or readeigen:
           self.set_kpoints()

        # Parse the name.EIG file
        if readeigen:
           self.set_eigenvalues()

        # Parse the BANDDAT file
        if readbands:
           self.set_bands()

        if readbands and len(pfiles) > 0:
           self.init_projections_bands(len(pfiles), pfiles[0])
           for ip, pf in enumerate(pfiles):
               self.set_projections_bands(ip,pf)

        if readeigen and len(pfiles) > 0:
           self.init_projections_eigenvalues(len(pfiles), pfiles[0])
           for ip, pf in enumerate(pfiles):
               self.set_projections_eigenvalues(ip,pf)

        # Parse the sys.out file for molecular orbital coefficients
        #self.set_eigenvectors()

    def set_params(self):

        infile = self.fileroot+self.sysname+".fdf"
        try:
           f = open(infile,'r')
        except:
           error_msg = 'File '+infile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()

        # Spin polarization
        spinpol = False
        spinorb = False
        for line in lines:
            if line.strip().lower().startswith('spinpolarized'):
                if line.strip().lower().split()[1] == 'true':
                    spinpol = True

            if line.strip().lower().startswith('spin'):
                if line.strip().lower().split()[1] == 'non-polarized':
                    spinpol = False
                    spinorb = False
                elif line.strip().lower().split()[1] == 'polarized':
                    spinpol = True
                    spinorb = False
                elif line.strip().lower().split()[1] == 'non-colinear' or \
                     line.strip().lower().split()[1] == 'spin-orbit':
                    spinpol = True
                    spinorb = True
                break

        self.spin = Spinor(spinpol=spinpol, spinorb=spinorb)

        # Band structure
        self.has_bands = False
        for line in lines:
            if 'bandlines' in line.strip().lower():
                self.has_bands = True
                break
            #if line.strip().lower().startswith('writebands'):
            #    if line.strip().lower().split()[1] == 'true':
            #        self.has_bands = True
            #    else:
            #        self.has_bands = False
            #    break

        print ('has_bands : ', self.has_bands)

        if self.has_bands: 
            self.bands_vertices = [] 
            kpts = []
            nbranch = 0

            read = False
            for iline, line in enumerate(lines):
                if 'block bandlines' in line.strip().lower():
                    if not read:
                        read = True
                    else:
                        read = False
                    #print 'bandlines : ', line
                    continue
                   
 
                if read:
                    ldat = line.strip().split()
                    if nbranch == 0:
                        kstart = np.array([float(x) for x in ldat[1:4]])
                        kstop = np.array([float(x) for x in ldat[1:4]])
                        nkpts = int(ldat[0])
                    else:
                        kstart = deepcopy(kstop)
                        kstop = np.array([float(x) for x in ldat[1:4]])
                        nkpts = int(ldat[0])

                    for ikpt in range(nkpts):
                        kpt = kstart + (ikpt+1)*(kstop-kstart)/float(nkpts)          
                        #print '{:12.9f}  {:12.9f}  {:12.9f}'.format(*kpt)
                        kpts.append(kpt)

                    self.bands_vertices.append(len(kpts)-1)
                    nbranch += 1 
                    #print kstart, kstop, self.bands_vertices

            self.bands_kpts = np.array(kpts)
            #print ('number of kpts: ', len(self.bands_kpts))
            #self.wkpts = np.array([1.]*len(self.kpts))/len(self.kpts)
            self.bands_wkpts = np.array([1.]*len(self.bands_kpts))

#### DEVEL
#        elif self.has_bands and len(pfiles)<1:
#            pfile = self.fileroot+self.sysname+pfiles[0]+".EIGFAT"
#            try:
#               f = open(pfile,'rb')
#            except:
#               error_msg = 'File '+pfile+' not found!'
#               raise IOError(error_msg)
#
#            lines = f.readlines()   
#            f.close()
#
#            nband, nspin, nkpts = [int(x) for x in lines[1].strip().split()[:3]]
#            print 'proj bands file:', nband, nspin, nkpts 
#### END DEVEL

     

    @classmethod
    def structure_from_file(cls,filename, shift=False, shift_atom=0, shift_to=[0.,0.,0.]):

        try:
           f = open(filename,'r')
        except:
           error_msg = 'File '+filename+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()

        a0 = np.array([float(x) for x in lines[0].strip().split()[:3]])
        a1 = np.array([float(x) for x in lines[1].strip().split()[:3]])
        a2 = np.array([float(x) for x in lines[2].strip().split()[:3]])
        cell = np.array([a0,a1,a2])

        natom = int(lines[3].strip().split()[0])

        attypes = []
        atpos = []
        for il in range(4,natom+4):
            attypes.append(int(lines[il].strip().split()[1]))
            pos = np.array([float(x) for x in lines[il].strip().split()[2:5]])
            atpos.append(pos)

        if shift:
            atpos = np.array(atpos) + np.array(shift_to) - atpos[shift_atom] 

        return Structure(cell,attypes,atpos,coords_are_cartesian=False)

    def set_kpoints(self):

        kpfile = self.fileroot+self.filename+".KP"
        try:
           f = open(kpfile,'r')
        except:
           error_msg = 'File '+kpfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()
        nkpts = int(lines[0].strip().split()[0])
        print ('set_kpoints ', nkpts)
        self.kpts = np.empty((nkpts,3))
        self.wkpts = np.empty(nkpts)

        for ik in range(nkpts):
            #print (lines[ik+1])
            self.kpts[ik] = np.array([float(x)/0.529177249 for x in lines[ik+1].strip().split()[1:4]])
            #print (self.kpts[ik])
            self.wkpts[ik] = lines[ik+1].strip().split()[4]

    def set_eigenvalues(self):

        self.eigenvalues = Eigenset(self.structure.lattice, spin=self.spin, \
                               kpts=self.kpts, wkpts=self.wkpts, fractional=False)

        eigfile = self.fileroot+self.filename+".EIG"
        try:
           f = open(eigfile,'r')
        except:
           error_msg = 'File '+eigfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()


        efermi = float(lines[0].strip().split()[0])
        self.efermi = efermi
        nband, nspin, nkpts = [int(x) for x in lines[1].strip().split()[:3]]
        if nspin > 2:
            nspin = 1
        #print ('.EIG file:', nband, nspin, nkpts) 

        il = 0
        nkpl = int(np.ceil(float(nband*nspin)/10))
        #print (nkpl)
        for ikp in range(nkpts):
            for ie in range(nband*nspin):
                iband = ie%nband
                ispin = int(np.floor(ie/(nband)))
                il = 2 + ikp*nkpl + int(np.floor(ie/10))
                ip = ie%10
                #print (ikp, ie,':', iband, ispin, il, ip)
                if ie < 10:
                    ee = float(lines[il].strip().split()[ip+1])-efermi
                    #ee = float(lines[il].strip().split()[ip+1])
                else:
                    ee = float(lines[il].strip().split()[ip])-efermi
                    #ee = float(lines[il].strip().split()[ip])
                #print (ee)

                self.eigenvalues.set_eigenvalue(ikp, iband, ispin, E=ee)

        #self.nbands = nband
        #self.nbasis = self.nbands/self.spin.nbasis 

    def read_spin_directions(self, sfile, ishift=0, bands=False, eigenvalues=True):

        try:
           f = open(sfile,'r')
        except:
           error_msg = 'File '+sfile+' not found!'
           raise IOError(error_msg)
        lines = f.readlines()
        f.close()

        if eigenvalues:
            for l in lines[2:]:
                if len(l.strip().lower().split()) == 0:
                    continue
                elif 'k-point' in l.strip().lower().split()[0]:
                    ik = int(l.strip().lower().split()[1])-1
                elif 'ie' in l.strip().lower().split()[0]:
                    continue
                else:
                    ib = int(l.strip().lower().split()[0])-1+ishift
                    sx, sy, sz = (float(x) for x in l.strip().lower().split()[2:5])
                    #print (ik, ib, sx, sy, sz)
                    self.eigenvalues[ik][ib][0]['S'] = np.array([sx,sy,sz])
        elif bands:
            for l in lines[2:]:
                if len(l.strip().lower().split()) == 0:
                    continue
                elif 'k-point' in l.strip().lower().split()[0]:
                    ik = int(l.strip().lower().split()[1])-1
                elif 'ie' in l.strip().lower().split()[0]:
                    continue
                else:
                    ib = int(l.strip().lower().split()[0])-1+ishift
                    sx, sy, sz = (float(x) for x in l.strip().lower().split()[2:5])
                    #print (ik, ib, sx, sy, sz)
                    self.bands_structure[ik][ib][0]['S'] = np.array([sx,sy,sz])



    def set_geometry(self):

        geomfile = self.fileroot+self.filename+".STRUCT_OUT"
        try:
           f = open(geomfile,'r')
        except:
           error_msg = 'File '+geomfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()

        a0 = np.array([float(x) for x in lines[0].strip().split()[:3]])
        a1 = np.array([float(x) for x in lines[1].strip().split()[:3]])
        a2 = np.array([float(x) for x in lines[2].strip().split()[:3]])
        cell = np.array([a0,a1,a2])
        #print cell

        natom = int(lines[3].strip().split()[0])

        attypes = []
        atpos = []
        for il in range(4,natom+4):
            attypes.append(int(lines[il].strip().split()[1]))
            pos = np.array([float(x) for x in lines[il].strip().split()[2:5]])
            atpos.append(pos)

        self.structure = Structure(cell,attypes,atpos,coords_are_cartesian=False)


    def set_bands(self):

        self.bands_structure = Eigenset(self.structure.lattice, spin=self.spin, \
                               kpts=self.bands_kpts, wkpts=self.bands_wkpts, fractional=True, \
                               vertices=self.bands_vertices)

        bandfile = self.fileroot+self.filename+".bands"
        try:
           f = open(bandfile,'r')
        except:
           error_msg = 'File '+bandfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()


        efermi = float(lines[0].strip().split()[0])
        self.efermi = efermi
        nband, nspin, nkpts = [int(x) for x in lines[3].strip().split()[:3]]
        #print 'bands file:', nband, nspin, nkpts 

        il = 0
        nkpl = int(np.ceil(float(nband*nspin)/10))
        #print nkpl
        for ikp in range(nkpts):
            for ie in range(nband*nspin):
                iband = ie%nband
                ispin = int(np.floor(ie/(nband)))
                il = 4 + ikp*nkpl + int(np.floor(ie/10))
                ip = ie%10
                if ie < 10:
                    ee = float(lines[il].strip().split()[ip+1])-efermi
                else:
                    ee = float(lines[il].strip().split()[ip])-efermi

                self.bands_structure.set_eigenvalue(ikp, iband, ispin, E=ee)

        #self.nbands = nband
        #self.nbasis = self.nbands/self.spin.nbasis 


    def init_projections_bands(self, n, filename):

        pp = np.array([0.]*n)

        self.proj_bands_structure = Eigenset(self.structure.lattice, spin=self.spin, \
                               kpts=self.bands_kpts, wkpts=self.bands_wkpts, fractional=True, \
                               vertices=self.bands_vertices)

        pfile = self.fileroot+filename+".EIGFAT"
        try:
           f = open(pfile,'r')
        except:
           error_msg = 'File '+pfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()

        nband, nspin, nkpts = [int(x) for x in lines[1].strip().split()[:3]]
        #print 'Init projections from file:', nband, nspin, nkpts 

        il = 0
        nkpl = int(np.ceil(float(nband)/4))
        #print nkpl
        for ikp in range(nkpts):
            for ispin in range(nspin):
                for ie in range(nband):
                    iband = ie%nband
                    il = 2 + (ikp+1) + ispin*nkpl  + ikp*nspin*nkpl + int(np.floor(ie/4))
                    ip = ie%4
                    ee = float(lines[il].strip().split()[2*ip])-self.efermi
                    self.proj_bands_structure.set_eigenvalue(ikp, iband, ispin, E=ee)

        self.proj_bands_structure.set_default_eigenvalue_data(P=pp)



    def set_projections_bands(self, iproj, filename):

        pfile = self.fileroot+filename+".EIGFAT"
        try:
           f = open(pfile,'r')
        except:
           error_msg = 'File '+pfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()

        nband, nspin, nkpts = [int(x) for x in lines[1].strip().split()[:3]]
        #print 'proj bands file:', nband, nspin, nkpts 

        il = 0
        nkpl = int(np.ceil(float(nband)/4))
        #print nkpl
        for ikp in range(nkpts):
            for ispin in range(nspin):
                for ie in range(nband):
                    iband = ie%nband
                    il = 2 + (ikp+1) + ispin*nkpl  + ikp*nspin*nkpl + int(np.floor(ie/4))
                    ip = ie%4
                    #print ie, iband, ispin, il, ip, ip+1
                    #print lines[il].strip().split()
                    #ee = float(lines[il].strip().split()[2*ip])
                    pp = float(lines[il].strip().split()[2*ip+1])
                    #print pp
                    pinit = self.proj_bands_structure.get_eigenvalue(ikp, iband, ispin)
                    ppost = deepcopy(pinit['P'])
                    ppost[iproj] = pp
                    self.proj_bands_structure.set_eigenvalue(ikp, iband, ispin, P=ppost)

    def init_projections_eigenvalues(self, n, filename):

        pp = np.array([0.]*n)

        self.proj_eigenvalues = Eigenset(self.structure.lattice, spin=self.spin, \
                               kpts=self.kpts, wkpts=self.wkpts, fractional=False)


        pfile = self.fileroot+filename+".EIGFAT"
        try:
           f = open(pfile,'r')
        except:
           error_msg = 'File '+pfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()

        nband, nspin, nkpts = [int(x) for x in lines[1].strip().split()[:3]]
        #print 'Init projections from file:', nband, nspin, nkpts 

        il = 0
        nkpl = int(np.ceil(float(nband)/4))
        #print nkpl
        for ikp in range(nkpts):
            for ispin in range(nspin):
                for ie in range(nband):
                    iband = ie%nband
                    il = 2 + (ikp+1) + ispin*nkpl  + ikp*nspin*nkpl + int(np.floor(ie/4))
                    ip = ie%4
                    ee = float(lines[il].strip().split()[2*ip])-self.efermi
                    self.proj_eigenvalues.set_eigenvalue(ikp, iband, ispin, E=ee)

        self.proj_eigenvalues.set_default_eigenvalue_data(P=pp)



    def set_projections_eigenvalues(self, iproj, filename):

        pfile = self.fileroot+filename+".EIGFAT"
        try:
           f = open(pfile,'r')
        except:
           error_msg = 'File '+pfile+' not found!'
           raise IOError(error_msg)

        lines = f.readlines()   
        f.close()

        nband, nspin, nkpts = [int(x) for x in lines[1].strip().split()[:3]]
        #print 'proj bands file:', nband, nspin, nkpts 

        il = 0
        nkpl = int(np.ceil(float(nband)/4))
        #print nkpl
        for ikp in range(nkpts):
            for ispin in range(nspin):
                for ie in range(nband):
                    iband = ie%nband
                    il = 2 + (ikp+1) + ispin*nkpl  + ikp*nspin*nkpl + int(np.floor(ie/4))
                    ip = ie%4
                    #print ie, iband, ispin, il, ip, ip+1
                    #print lines[il].strip().split()
                    #ee = float(lines[il].strip().split()[2*ip])
                    pp = float(lines[il].strip().split()[2*ip+1])
                    #print pp
                    pinit = self.proj_eigenvalues.get_eigenvalue(ikp, iband, ispin)
                    ppost = deepcopy(pinit['P'])
                    ppost[iproj] = pp
                    self.proj_eigenvalues.set_eigenvalue(ikp, iband, ispin, P=ppost)

